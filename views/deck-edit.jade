extends layout

append head
  link(rel="stylesheet", href="/stylesheets/deck-edit.css")
  script(src="/javascripts/rangy-core.js")
  script(src="/javascripts/rangy-cssclassapplier.js")
  script.
    var cssApplier;
    window.onload = function() {
      rangy.init();
      boldApplier = rangy.createCssClassApplier("bold", {normalize: true});
      italicApplier = rangy.createCssClassApplier("italic", {normalize: true});
    };

append content
  #content
    include includes/path

    #flashcard-editor
      #content-left
        //- List of flashcards
        #list-flashcards.list-group
          - if (flashcards) {
              each f in flashcards
                a.list-group-item(href="#" data-flashcard-id=f.id)
                  - if (f.term) {
                      h5.list-group-item-heading.term= f.term
                  - }
                  - else {
                      h5.list-group-item-heading.term
                        i Term
                  - }
                  - if (f.definition) {  
                      p.list-group-item-text.definition= f.definition
                  - }
                  - else {
                      p.list-group-item-text.definition
                        i Definition
                  - }
          - }

      #content-center
        nav#edit-tools
          a(href="#" onclick="boldApplier.toggleSelection();") Bold 
          a(href="#" onclick="italicApplier.toggleSelection();") Italic
        #flashcard
          .term(contenteditable=true spellcheck="false" data-placeholder="Term")
          .definition(contenteditable=true spellcheck="false" data-placeholder="Definition")

      #content-right
        p test
        #flashcard-info 

  br
  script.
    var flashcardList = $('#list-flashcards'),
        selectedFlashcard = null,
        term = $('#flashcard > .term'),
        definition = $('#flashcard > .definition'),
        arrowPrevious = $('#arrow-previous'),
        arrowNext = $('#arrow-next');

    var socket = io.connect();
    $(".nano").nanoScroller({ // display scrollbars
      alwaysVisible: true
    }); 

    var deck = {
      saveFlashcard: function (flashcard) {
        if (!flashcard || (typeof flashcard.data('flashcard-id') !== 'number' &&
          typeof flashcard.prev('a.list-group-item') === 'undefined')) {
          console.error('The flashcard you\'re trying to save is invalid');
          return;
        }

        var obj = {};
        if (flashcard.children('.term').text() !== term.text()) {
          obj.term = (term.html() !== '<i>'+term.data('placeholder')+'</i>') ?
                      term.text() : '';
          if (obj.term !== '') {
            flashcard.children('.term').text(obj.term); 
          }
          else {
            flashcard.children('.term')
                     .html('<i>'+term.data('placeholder')+'</i>'); 
          }
        }

        if (flashcard.children('.definition').text() !== definition.text()) {
          obj.definition = 
            (definition.html() !== '<i>'+definition.data('placeholder')+'</i>') ?
             definition.text() : '';
          flashcard.children('.definition').text(obj.definition); 
          if (obj.definition !== '') {
            flashcard.children('.definition').text(obj.definition); 
          }
          else {
            flashcard.children('.definition')
                     .html('<i>'+definition.data('placeholder')+'</i>'); 
          }
        }

        //- No modification to send
        if (typeof obj.term === 'undefined' 
          && typeof obj.definition === 'undefined') {
          return;
        }

        if (typeof flashcard.data('flashcard-id') === 'number') {
          obj.id = flashcard.data('flashcard-id');
        }
        obj.deckId = #{deck.id};

        socket.emit('saveFlashcard', obj);
      },

      moveFlashcard: function (id, beforeId) {
        if (typeof id !== 'number' || typeof afterId !== 'number') {
          return;
        }

        socket.emit('moveFlashcard', {
          flashcardId: id,
          beforeId: beforeId
        });
      },

      deleteFlashcard: function (id) {
        if (typeof id !== 'number') {
          return;
        }

        socket.emit('deleteFlashcard', {flashcardId: id});
      },

      goTo: function (flashcard) {

        term.blur();
        definition.blur();

        //- Nothing to save if there's no flashcard
        //- in the deck or if no flashcard has been
        //- selected yet
        if (selectedFlashcard) {
          this.saveFlashcard(selectedFlashcard);
        }
        this.displayFlashcard(flashcard);
      },

      createFlashcard: function () {
          var item = '' +
            '<a class="list-group-item" href="#">' +
              '<h5 class="list-group-item-heading term">' +
                '<i>' + term.data('placeholder') + '</i>' +
              '</h5>' +
              '<p class="list-group-item-text definition">' +
                '<i>' + definition.data('placeholder') + '</i>' +
              '</p>' +
            '</a>';

          return $(item);
      },

      displayFlashcard: function (flashcard) {
        //- If the flashcard already exists
        //- flashcard.length correspond to the number of node
        //- contained in the flashcard jquery object
        if (typeof flashcard !== 'undefined' && flashcard.length > 0) {
          if (selectedFlashcard) {
            selectedFlashcard.removeClass('active');
          }

          term.html(flashcard.children('.term').html());
          definition.html(flashcard.children('.definition').html());

          flashcard.addClass('active');
          selectedFlashcard = flashcard;
        }
        //- If the flashcard does not exist yet, there's
        //- two possibilities: the deck is empty, or
        //- we want to display the flashcard after the
        //- deck's last flashcard
        //- In the first case, selectedFlashcart isn't set
        //- and in the second case it is set to the last
        //- flashcard
        else if (!selectedFlashcard ||
          selectedFlashcard.get(0) === flashcardList.children().last().get(0)) {

          if (selectedFlashcard) {
            selectedFlashcard.removeClass('active');
          }

          var createdFlashcard = this.createFlashcard(); 
          createdFlashcard.appendTo(flashcardList);

          term.html('');
          definition.html('');

          createdFlashcard.addClass('active');
          selectedFlashcard = createdFlashcard;
        }

        definition.blur(); // show the placeholder if definition is empty
        term.focus();
      },

      goToPreviousFlashcard: function () {
        this.goTo(selectedFlashcard.prev('a.list-group-item'));
      },

      goToNextFlashcard: function () {
        this.goTo(selectedFlashcard.next('a.list-group-item'));
      }
    };

    deck.goTo(flashcardList.find('a.list-group-item').first());

    term.keydown(function (e) {
      if (e.shiftKey && e.which === 9) {
        deck.goToPreviousFlashcard();
        e.preventDefault(); 
      }
    });

    definition.keydown(function (e) {
      if (!e.shiftKey && e.which === 9) {
        deck.goToNextFlashcard();
        e.preventDefault(); // prevent from focusing URL bar
      }
    });

    arrowPrevious.click(deck.goToPreviousFlashcard);
    arrowNext.click(deck.goToNextFlashcard);

    flashcardList.on('click', 'a.list-group-item', function (e) {
      deck.goTo($(this));
    });

    //- Simulate a placeholder on flashcard term and
    //- definition which show 'Term' and 'Definition'
    //- if the term or the definition is empty
    $('[data-placeholder]').focus(function() {
      var input = $(this);
      if (input.html() === '<i>' + input.data('placeholder') + '</i>') {
        input.html('');
        input.removeClass('placeholder');
      }
    }).blur(function() {
      var input = $(this);
      if (input.text() === '' || 
        input.html() === '<i>' + input.data('placeholder') + '</i>') {

        input.addClass('placeholder');
        input.html('<i>' + input.data('placeholder') + '</i>');
      }
    }).blur();
